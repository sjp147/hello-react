pipeline {

    agent {
        kubernetes {
        label 'jenkins-slave'
        defaultContainer 'jnlp'
        yaml """
apiVersion: v1
kind: Pod
spec:
    containers:
    - name: jnlp
      image: openshift/jenkins-agent-nodejs-8-centos7:v3.11
      tty: true
    - name: tools
      image: 172.30.1.1:5000/cicd/openshift-build-tools:latest
      command:
      - cat
      tty: true
        """
        }
    }

    environment {
        APPLICATION_NAME = 'hello-react'
        GIT_REPO="https://github.com/sjp147/hello-react.git"
        GIT_BRANCH="master"
        STAGE_TAG = "promoteToQA"
        CICD_PROJECT="cicd"
        DEV_PROJECT = "dev"
        TEST_PROJECT = "test"
        STAGE_PROJECT = "stage"
        TEMPLATE_NAME = "hello-react"
        ARTIFACT_FOLDER = "target"
        PORT = 8081;
        GIT_COMMITTER_NAME = "Jenkins"
        GIT_COMMITTER_EMAIL = "Jenkins@openshift"
        //GIT_SSH="ssh -i /ssh/ssh-privatekey"
    }
    stages {
        stage('Get Latest Code') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }

    

        stage('Create web app'){
            steps{
                    dir("app") {

                            sh "npm ci"
                            sh "npm run build"

                    }
            }
        }

         stage('Store web app'){
            steps{
                script{
                    def safeBuildName  = "${APPLICATION_NAME}_${BUILD_NUMBER}",
                        artifactFolder = "${ARTIFACT_FOLDER}",
                        fullFileName   = "${safeBuildName}.tar.gz",
                        applicationZip = "${artifactFolder}/${fullFileName}"
                        applicationDir = ["app/build",
                                            "container/nginx.conf",
                                            "Dockerfile",
                                            ].join(" ");
                    def needTargetPath = !fileExists("${artifactFolder}")
                    if (needTargetPath) {
                        sh "mkdir ${artifactFolder}"
                    }
                    sh "tar -czvf ${applicationZip} ${applicationDir}"
                    archiveArtifacts artifacts: "${applicationZip}", excludes: null, onlyIfSuccessful: true
                }
            }
        }


        stage('Create Image Builder') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            return !openshift.selector("bc", "${TEMPLATE_NAME}").exists();
                        }
                }
            }
        }
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject(DEV_PROJECT) {
                        openshift.newBuild("--name=${TEMPLATE_NAME}", "--docker-image=docker.io/nginx:mainline-alpine", "--binary=true")
                        }
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                            openshift.selector("bc", "$TEMPLATE_NAME").startBuild("--from-archive=${ARTIFACT_FOLDER}/${APPLICATION_NAME}_${BUILD_NUMBER}.tar.gz", "--wait=true")
                        }
                    }
                }
            }
        }

        stage('Deploy to dev') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {

                        openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:${env.GIT_COMMIT}") 
                        }
                    }
                }
                    container('tools') {
                          sh "env"
                      
            

                        withCredentials([string(credentialsId: "argocd-deploy", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app set hello-react-dev --kustomize-image 172.30.1.1:5000/dev/hello-react:${env.GIT_COMMIT} --insecure"

                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app sync hello-react-dev --force --insecure"
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app wait hello-react-dev --timeout 60 --insecure"
                                        }
                    
                    
            }

        }

    }

    stage('Deploy to test') {
            steps {
                
                    container('tools') {                      
            

                        withCredentials([string(credentialsId: "argocd-deploy", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app set hello-react-test --kustomize-image 172.30.1.1:5000/dev/hello-react:${env.GIT_COMMIT} --insecure"

                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app sync hello-react-test --force --insecure"
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app wait hello-react-test --timeout 60 --insecure"
                                        }
                    
                    
            }

        }

    }

   stage('Promote to STAGE?') {
            steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }
            }
        }

    stage('Deploy to stage') {
            steps {

                    container('tools') {
                      
            

                        withCredentials([string(credentialsId: "argocd-deploy", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app set hello-react-stage --kustomize-image 172.30.1.1:5000/dev/hello-react:${env.GIT_COMMIT} --insecure"

                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app sync hello-react-stage --force --insecure"
                        sh "ARGOCD_SERVER=argocd-server-argocd.192.168.64.7.nip.io argocd --grpc-web app wait hello-react-stage --timeout 60 --insecure"
                                        }
                    
                    
            }

        }

    }
}
}
